// Generated by CoffeeScript 2.0.3
var actions, box, canvas, context, fightInterface, monsterTurn, render, riskbar, spawn, useSkill;

canvas = void 0;

context = void 0;

window.onload = function() {
  canvas = document.createElement('canvas');
  canvas.width = 600;
  canvas.height = 400;
  canvas.style.width = (canvas.width * 2) + "px";
  canvas.style.height = (canvas.height * 2) + "px";
  context = canvas.getContext('2d');
  document.body.appendChild(canvas);
  context.font = "12px monospace";
  context.fillStyle = "black";
  context.strokeStyle = "white";
  context.clearRect(0, 0, canvas.width, canvas.height);
  context.lineWidth = 2;
  spawn(bosses[0], 200, 100);
  hit(heroes[0], heroes[0]);
  document.onkeydown = fightInterface;
  return render();
};

spawn = function(monster, x, y) {
  var boss;
  boss = Object.create(monster);
  boss.image = document.createElement('img');
  boss.image.src = boss.sprite;
  boss.x = x;
  boss.y = y;
  return monsters.push(boss);
};

render = function() {
  var j, len, monster;
  context.clearRect(0, 0, canvas.width, canvas.height);
  for (j = 0, len = monsters.length; j < len; j++) {
    monster = monsters[j];
    context.drawImage(monster.image, monster.x, monster.y);
  }
  box(heroes[0], 50, 100);
  box(heroes[1], 50, 200);
  box(heroes[2], 50, 300);
  box(heroes[3], 450, 100);
  box(heroes[4], 450, 200);
  riskbar();
  return requestAnimationFrame(render);
};

box = function(hero, x, y) {
  context.fillStyle = "black";
  context.fillRect(x - 10, y - 20, 100, 80);
  context.fillStyle = "white";
  context.strokeRect(x - 10, y - 20, 100, 80);
  context.fillText(hero.name, x, y);
  context.fillText(hero.hp + "/" + hero.maxHp, x, y + 20);
  context.beginPath();
  context.moveTo(x, y + 22);
  context.lineTo(x + (hero.hp / hero.maxHp) * 80, y + 22);
  context.stroke();
  if (hero.woundHp > hero.hp) {
    context.strokeStyle = "red";
    context.beginPath();
    context.moveTo(x + (hero.hp / hero.maxHp) * 80, y + 22);
    context.lineTo(x + (hero.woundHp / hero.maxHp) * 80, y + 22);
    context.stroke();
    context.strokeStyle = "white";
  }
  return actions(hero, x, y);
};

actions = function(hero, x, y) {
  var i, j, len, ref, results, skill;
  x += 95;
  y -= 25;
  context.fillStyle = "black";
  context.fillRect(x, y, 50, 90);
  context.fillStyle = "white";
  context.strokeRect(x, y, 50, 90);
  if (!hero.skills) {
    return;
  }
  i = 0;
  ref = hero.skills;
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    skill = ref[j];
    context.fillText(skill.name, x + 5, y + 15 + i * 10);
    if (heroes[cursor.hero] === hero && cursor.skill === i) {
      context.drawImage(cursor.sprite, x - 25, y + 3 + i * 10);
    }
    results.push(i++);
  }
  return results;
};

riskbar = function() {
  context.fillText("Risk: " + risk, 50, 30);
  context.beginPath();
  context.moveTo(50, 32);
  context.lineTo(risk * 100 + 50, 32);
  return context.stroke();
};

fightInterface = function(event) {
  var key;
  key = event.key || event.keyIdentifier;
  if (key === "Left") {
    cursor.hero--;
    if (cursor.hero < 0) {
      cursor.hero = 4;
    }
  }
  if (key === "Right") {
    cursor.hero++;
    if (cursor.hero > 4) {
      cursor.hero = 0;
    }
  }
  if (key === "Up") {
    cursor.skill--;
    if (cursor.skill < 0) {
      cursor.skill = heroes[cursor.hero].skills.length - 1;
    }
  }
  if (key === "Down") {
    cursor.skill++;
    if (cursor.skill > heroes[cursor.hero].skills.length - 1) {
      cursor.skill = 0;
    }
  }
  if (key === " ") {
    return useSkill();
  }
};

useSkill = function() {
  var skill;
  skill = heroes[cursor.hero].skills[cursor.skill];
  skill.effect(heroes[cursor.hero], monsters[0]);
  if (risk > Math.random() * 100) {
    monsterTurn();
    return risk -= 50;
  }
};

monsterTurn = function() {
  var j, len, monster, possible, results, skill;
  results = [];
  for (j = 0, len = monsters.length; j < len; j++) {
    monster = monsters[j];
    if (!monster.stage) {
      monster.stage = 0;
    }
    possible = monster.actions[monster.stage];
    skill = possible[Math.floor(Math.random() * possible.length)];
    skill.effect(monster, heroes[0]);
    monster.stage++;
    if (monster.stage > monster.actions.length - 1) {
      results.push(monster.stage = 0);
    } else {
      results.push(void 0);
    }
  }
  return results;
};
